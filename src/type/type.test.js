const test = require( "tape" )
const { type, is, isPromise, isEmpty } = require( "./type" )

test( "type ( input: mixed ): string", t => {
  t.equal( type( null ), "Null", "null should equal Null" )
  t.equal( type( undefined ), "Undefined", "undefined should equal Undefined" )
  t.equal( type( NaN ), "Number", "NaN should equal Number" )
  t.equal( type( false ), "Boolean", "false should equal Boolean" )
  t.equal( type( 2 ), "Number", "2 should equal Number" )
  t.equal( type( "" ), "String", "\"\" should equal String" )
  t.equal( type( [] ), "Array", "[] should equal Array" )
  t.equal( type( {} ), "Object", "{} should equal Object" )
  t.equal( type( new Date() ), "Date", "new Date() should equal Date" )
  t.equal( type( () => {} ), "Function", "() => {} should equal Function" )
  t.equal( type( /[A-z]/ ), "RegExp", "/[A-z]/ should equal RegExp" )
  t.equal( type( Promise.resolve( 2 ) ), "Promise", "Promise.resolve(2) should equal Promise" )
  t.end()
} )

test( "isPromise ( input: mixed ): boolean", t => {
  t.equal( isPromise( {} ), false, "{} should equal false" )
  t.equal( isPromise( Promise.resolve( 2 ) ), true, "new Promise() should equal true" )
  t.end()
} )

test( "is ( input: mixed ): boolean", t => {
  t.equal( is( null ), false, "null should equal false" )
  t.equal( is( undefined ), false, "undefined should equal false" )
  t.equal( is( NaN ), false, "NaN should equal false" )
  t.equal( is( 0 ), true, "0 should equal true" )
  t.equal( is( false ), true, "false should equal true" )
  t.equal( is( "" ), true, "\"\" should equal true" )
  t.equal( is( {} ), true, "{} should equal true" )
  t.equal( is( [] ), true, "[] should equal true" )
  t.end()
} )

test( "isEmpty ( input: mixed ): boolean", t => {
  t.equal( isEmpty( {} ), true, "{} should equal true" )
  t.equal( isEmpty( { a: 2 } ), false, "{a:2} should equal false" )
  t.equal( isEmpty( [] ), true, "[] should equal true" )
  t.equal( isEmpty( [ 2 ] ), false, "[2] should equal false" )
  t.equal( isEmpty( "" ), true, "\"\" should equal true" )
  t.equal( isEmpty( "2" ), false, "\"2\" should equal false" )
  t.equal( isEmpty( 2 ), false, "2 should equal false" )
  t.equal( isEmpty( NaN ), true, "NaN should equal true" )
  t.equal( isEmpty( null ), true, "null should equal true" )
  t.equal( isEmpty( undefined ), true, "undefined should equal true" )
  t.equal( isEmpty( () => {} ), false, "() => {} should equal false" )
  t.equal( isEmpty( new Date() ), false, "new Date() should equal false" )
  t.end()
} )
